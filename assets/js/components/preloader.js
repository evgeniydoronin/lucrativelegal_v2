/**
 * Preloader Component
 * Manages the loading animation with percentage counter
 */

class Preloader {
    constructor() {
        this.preloader = document.getElementById('preloader');
        this.percentage = document.getElementById('preloader-percentage');
        this.command = document.getElementById('preloader-command');
        this.slices = document.getElementById('preloader-slices');
        this.rocket = document.getElementById('preloader-rocket');
        
        this.currentPercentage = 10;
        this.targetPercentage = 10;
        this.isComplete = false;
        this.isLoading = false;
        this.pageLoaded = false;
        this.animationId = null;
        
        // Commands array
        this.commands = [
            'LAUNCHING YOUR ROI'
        ];
        this.currentCommand = '';
        
        this.init();
    }
    
    init() {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞...');
        
        if (!this.preloader) {
            console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä
        this.show();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.updatePercentageDisplay();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
        this.startLoading();
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (document.readyState === 'complete') {
            this.onPageLoad();
        } else {
            window.addEventListener('load', () => this.onPageLoad());
        }
        
        console.log('‚úÖ –ü—Ä–µ–ª–æ–∞–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    show() {
        if (this.preloader) {
            this.preloader.classList.remove('hidden');
            document.body.style.overflow = 'hidden';
        }
    }
    
    hide() {
        if (this.preloader) {
            this.preloader.classList.add('hidden');
            document.body.style.overflow = '';
            
            // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∏ –æ—Ç–º–µ–Ω—è–µ–º fallback —Ç–∞–π–º–µ—Ä
            this.destroy();
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä –∏–∑ DOM —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => {
                if (this.preloader && this.preloader.parentNode) {
                    this.preloader.parentNode.removeChild(this.preloader);
                }
            }, 1000);
        }
    }
    
    startLoading() {
        if (this.isLoading) {
            console.log('‚ö†Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }
        
        this.isLoading = true;
        console.log('üé¨ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –æ—Ç 10 –¥–æ 1');
        
        // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç 10 –¥–æ 1 –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã
        this.animateToPercentage(1, 3000);
        
        
        // –ß–µ—Ä–µ–∑ 3.2 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        setTimeout(() => {
            this.isLoading = false;
            if (this.pageLoaded) {
                this.completeLoading();
            }
        }, 3200);
    }
    
    onPageLoad() {
        console.log('üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        this.pageLoaded = true;
        
        // –ï—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –µ—â–µ –∏–¥–µ—Ç, –∂–¥–µ–º –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if (!this.isLoading) {
            this.completeLoading();
        }
    }
    
    completeLoading() {
        console.log('üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –¥–æ 0');
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –¥–æ 0
        this.animateToPercentage(0, 500);
        
        setTimeout(() => {
            this.startExitAnimation();
        }, 800);
    }
    
    animateToPercentage(target, duration) {
        this.targetPercentage = target;
        const startPercentage = this.currentPercentage;
        const difference = target - startPercentage;
        const startTime = performance.now();
        
        const animate = (currentTime) => {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º easing —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            const easeProgress = this.easeOutCubic(progress);
            
            this.currentPercentage = startPercentage + (difference * easeProgress);
            this.updatePercentageDisplay();
            
            if (progress < 1) {
                this.animationId = requestAnimationFrame(animate);
            } else {
                this.currentPercentage = target;
                this.updatePercentageDisplay();
            }
        };
        
        this.animationId = requestAnimationFrame(animate);
    }
    
    updatePercentageDisplay() {
        if (this.percentage) {
            const displayPercentage = Math.round(this.currentPercentage);
            this.percentage.textContent = `${displayPercentage}`;
            
            // Update command based on counter ranges
            this.updateCommand(displayPercentage);
        }
    }
    
    updateCommand(percentage) {
        // Always show the single command throughout the countdown
        const newCommand = this.commands[0];
        
        // Only update if command changed
        if (newCommand !== this.currentCommand) {
            this.currentCommand = newCommand;
            this.showCommand(newCommand);
        }
    }
    
    showCommand(commandText) {
        if (this.command && commandText) {
            // Update text and show with fade effect (use innerHTML for <br> tags)
            this.command.innerHTML = commandText;
            this.command.classList.remove('visible');
            
            // Small delay to ensure smooth transition
            setTimeout(() => {
                this.command.classList.add('visible');
            }, 50);
        }
    }
    
    
    
    startExitAnimation() {
        console.log('üé¨ –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—ã—Ö–æ–¥–∞ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞');
        
        // –û—Ç–º–µ–Ω—è–µ–º fallback —Ç–∞–π–º–µ—Ä —Å—Ä–∞–∑—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if (window.fallbackTimer) {
            clearTimeout(window.fallbackTimer);
            window.fallbackTimer = null;
            console.log('‚úÖ Fallback —Ç–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—ã—Ö–æ–¥–∞');
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        setTimeout(() => {
            if (this.percentage) this.percentage.style.opacity = '0';
            if (this.command) this.command.style.opacity = '0';
        }, 500);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤–∑–ª–µ—Ç–∞ —Ä–∞–∫–µ—Ç—ã
        setTimeout(() => {
            this.startRocketTakeoff();
        }, 800);
    }
    
    startRocketTakeoff() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–∑–ª–µ—Ç–∞ —Ä–∞–∫–µ—Ç—ã');
        
        if (this.rocket) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–∑–ª–µ—Ç–∞
            this.rocket.classList.add('takeoff');
            
            // –°–ª—É—à–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            const handleAnimationEnd = () => {
                console.log('üöÄ –†–∞–∫–µ—Ç–∞ —É–ª–µ—Ç–µ–ª–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–ª–æ—Å');
                this.rocket.removeEventListener('animationend', handleAnimationEnd);
                this.startSlicesAnimation();
            };
            
            this.rocket.addEventListener('animationend', handleAnimationEnd);
            
            // Fallback –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ animationend –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
            setTimeout(() => {
                if (this.rocket && this.rocket.classList.contains('takeoff')) {
                    console.log('üöÄ Fallback: –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–ª–æ—Å –ø–æ—Å–ª–µ –≤–∑–ª–µ—Ç–∞ —Ä–∞–∫–µ—Ç—ã');
                    this.rocket.removeEventListener('animationend', handleAnimationEnd);
                    this.startSlicesAnimation();
                }
            }, 2500); // 2s –∞–Ω–∏–º–∞—Ü–∏—è + 500ms –∑–∞–ø–∞—Å
        } else {
            // –ï—Å–ª–∏ —Ä–∞–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä –∫–∞–∫ –æ–±—ã—á–Ω–æ
            console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç —Ä–∞–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä');
            this.hide();
        }
    }
    
    startSlicesAnimation() {
        console.log('üé¨ –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è —à—Ç–æ—Ä');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è —à—Ç–æ—Ä (–æ–Ω–∏ —É–∂–µ –≤–∏–¥–∏–º—ã)
        if (this.slices) {
            this.slices.classList.add('animate');
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —à—Ç–æ—Ä
            setTimeout(() => {
                this.hide();
            }, 800); // –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ —à—Ç–æ—Ä
        } else {
            // –ï—Å–ª–∏ —Å–ª–∞–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä
            this.hide();
        }
    }
    
    // Easing —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
    easeOutCubic(t) {
        return 1 - Math.pow(1 - t, 3);
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è (–Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫)
    forceHide() {
        console.log('üö´ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞');
        this.hide();
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    destroy() {
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
        }
        
        // –û—Ç–º–µ–Ω—è–µ–º fallback —Ç–∞–π–º–µ—Ä
        if (window.fallbackTimer) {
            clearTimeout(window.fallbackTimer);
            window.fallbackTimer = null;
            console.log('‚úÖ Fallback —Ç–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω');
        }
        
        window.removeEventListener('load', this.onPageLoad);
        
        if (this.preloader && this.preloader.parentNode) {
            this.preloader.parentNode.removeChild(this.preloader);
        }
        
        document.body.style.overflow = '';
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
export default Preloader;
